1. open R
2. rm(list = ls())
3. ls() # --> character(0)
4. library(Rcpp)
   library(RcppArmadillo)
   RcppArmadillo.package.skeleton(name = 'q4rcpp',path='./')

  # This will create the folder under the path for the package, which includes folders/files under it as:
  # R/  ## where to add the functions in .R files 
  # man/ ## where to add documentary for functions
  # src/ ## where to add .cpp files
  # NAMESPACE
  # DESCRIPTION
  # And you can also do it in Rstudio by Clicking 'File' --> 'New Project' --> 'New Directory' --> 'R package'
  
7. Add/modify functions to .R files under R/ folder
  Write down you code and save the .R file to R/ folder # the name of .R doesn't matter, but it is good to name it as the name of function to keep track. 
8. Add/modify documentations to .Rd files under man/ folder
  This can be done by using the 'Rd template' in Rstudio (recommended): 
  Click 'File' --> 'New File' --> 'R Documentation' 
  Enter the TITLE of the FUNCTION and select 'Fuction' under the 'Rd template' menu. 
  Fill in the template at least for 'title'. # Know more about the format here?
  Save the .Rd file to man/ folder. # the name of .Rd doesn't matter, but it is good to name it as the name of function to keep track. 
9. Add .cpp to src folder. An example below. Structure and sentences are necessary. 
   # include <RcppArmadillo.h>
   // [[Rcpp::depends(RcppArmadillo)]]
   
   using namespace Rcpp;
   
   // [[Rcpp::export()]]
   int sumCpp(Rcpp:: IntegerVector x) {
           int n=x.size();
           int res = 0;
           for (int i = 0; i <n; i++){
                    res +=x[ i ];
           }
           return res;
   }

10.  cd `name`
    in R:
     library(Rcpp)
     compileAttributes(verbose=T)
     library(tools) # Register your Rcpp # what does this mean??
     package_native_routine_registration_skeleton("src") ## return nothing in my case. but doesn't matter. 
     #Resgieter: Running the above command will return a text string. Copy and paste and save it as /src/init.c.

11. R CMD build path/name  # this will be create a .tar.gz file under current folder but doesn't compile the packages. 
12. R CMD check --as-cran *tar.gz
13. R CMD INSTALL *tar.gz # This compiles the package and add it to the folder under .libPaths()
                          # if .libPaths() not writable: R CMD INSTALL *tar.gz --library=''
                          # and append .libPaths() in R: .libPaths(c(.libPaths(),new_path))

### Useful Rcpp snippets: chrome-extension://efaidnbmnnnibpcajpcglclefindmkaj/https://web.mit.edu/insong/www/pdf/rpackage_instructions.pdf 
